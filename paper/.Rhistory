library("papaja")
#r_refs("r-references.bib")
# This is needed to include captions above.
source("figcap-above.R")
knitr::knit_hooks$set(plot = figcapabove_hook_plot_tex)
RCQL <- readRDS("Tables/RCQL.rds")
rows_to_keep <- c(
"behav_1_133_r", "behav_1_129_r", "behav_1_132_r" ,"wunsc_1_154_r", "selbv_1_198_r", "ableh_2_081_r",  #6 items
"sinnz_2_312", "sinnz_1_300", "posit_1_167", "selbw_2_325", "akzep_3_019", "optim_2_211_r",            #6 items
"zukun_1_339", "zukun_2_347", "zukun_2_344",                                                           #3 items 39 43 41
"humor_1_082", "humor_1_087", "humor_1_085_r",                                                         #3 items 46 48 47
"famil_1_373", "famil_1_371", "famil_1_378",                                                           #3 items 31 30 33
"sozia_1_355", "sozia_1_038", "sozia_1_354",                                                           #3 items 91 87 90
"physi_1_264", "physi_1_263", "ablen_1_048",                                                           #3 items 69 68 27
"umgan_1_221", "umgan_1_222", "aktiv_1_180"                                                            #3 items 25 26  9
)
#highlight final itemIDs
rows_to_color <- which(RCQL$item_name_auswertung %in% rows_to_keep)
# Finding the row numbers corresponding to these item names in their exact order
rows_to_color_order <- match(rows_to_keep, RCQL$item_name_auswertung)
RCQL <- RCQL %>%
select(-item_name_auswertung) %>%
mutate(Inverse = ifelse(is.na(Inverse), " ", Inverse))
col_names <- c("ID", "Itemtext (German)", "Factor", "Subfactor", "R", "$M$", "$SD$" )
colnames(RCQL) <- col_names
RCQL <- RCQL %>%
mutate(`$M$` = sprintf("%.2f", `$M$`),
`$SD$` = sprintf("%.2f", `$SD$`))
#setwd("/Users/cselva1/Desktop/BF_export/Analysis/paper")
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library("papaja")
#r_refs("r-references.bib")
# This is needed to include captions above.
source("figcap-above.R")
knitr::knit_hooks$set(plot = figcapabove_hook_plot_tex)
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
#Abbildung ähnlich wie bei alla machen auf Seite 94.
#https://kups.ub.uni-koeln.de/10627/1/Sawatzky_2020_Dissertation.pdf
# also von mögicher Struktur sprechen und dann bestimmte anazahl von items darstellen
#knitr::include_graphics(c("sem/sem1.png","sem/sem2.png","sem/sem3.png","sem/sem4.png"))
knitr::include_graphics("sem/sem4_saved_backup.png")
#knitr::include_graphics("sem/combined_plot.png")
library(ggplot2)
load("Tables/itemlist_EFA_PCA.Rdata")
final_df <- itemlist_EFA_PCA
final_df$Type = final_df$type
load("Tables/itemsets_PCAbifactor_fit.Rdata")
# Extract and append PCA results to final_df
for (i in seq_along(itemsets_PCAbifactor_fit)) {
pca_result <- itemsets_PCAbifactor_fit[[i]]
number_of_factors <- as.numeric(gsub("\\D", "", names(itemsets_PCAbifactor_fit)[i]))
pca_df <- data.frame(
type = "biPCA",
number_of_factors = number_of_factors,
CHI2 = pca_result[["CHI2"]],
RMSR = pca_result[["RMSR"]],
VAR = pca_result[["VAR"]],
DF = pca_result[["DF"]],
Type = "biPCA"
)
final_df <- rbind(final_df, pca_df)
}
final_df$CHI2DF <- final_df$CHI2/final_df$DF
line_types <- c("solid", "dashed", "dotted")
plot_index_apa <- function(index_name) {
# Determine the y-axis label based on the index name
y_label <- index_name
# Create the ggplot
p <- ggplot(final_df, aes(x = number_of_factors, y = as.numeric(get(index_name)), color = Type, shape = Type)) +
geom_point(size = 2) +
geom_line() +
labs(
y = y_label,
color = "Type"
) +
scale_x_continuous(breaks = c(1, 5, 10, 15, 20, 25)) +
scale_color_manual(
values = c("#222222", "darkgrey", "lightgrey"),
breaks = c("EFA", "PCA", "biPCA")
) +
scale_shape_manual(
values = c(16, 17, 18),
breaks = c("EFA", "PCA", "biPCA")
) +
scale_linetype_manual(values = line_types) +
theme_classic() +
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
text = element_text(family = "Times"),
axis.title = element_text(family = "Times", "bold"),
axis.text = element_text(family = "Times"),
legend.text = element_text(family = "Times"),
legend.title = element_text(family = "Times"),
axis.ticks.length = unit(0.2, "cm")  # Set the length of axis ticks
)+
coord_cartesian(xlim = c(1, 26))+  # Set a fixed range for the x-axis
guides(
color = guide_legend(override.aes = list(size = 3)),
shape = guide_legend(override.aes = list(size = 5))
)
# Print the plot
#print(p)
}
# Create APA-styled plots for the indices
p1 <- plot_index_apa("CHI2DF")+ #CHI2
labs(y = bquote(bold(Chi^2/DF)))
p2 <- plot_index_apa("RMSR")+
labs(y = "RMSR")
p3 <- plot_index_apa("VAR")+
labs(y = "Explained\nvariance")
# TOWARDS PUB REPLACE WITH DATA EXPORT
# Convert the list to a data frame
df <- data.frame(
Model = 1:26,
AIC = c(551126.5, 536383.9, 533960.9, 528852.5, 526576.2, 514415.8, 512292.4, 511167.4,
511539.3, 511283.6, 510827, 511091.1, 511476.1, 511521.7, 511768.7, 512784.3,
513906.4, 513061.3, 514234.2, 515090, 515697.8, 516063.9, 642511, 645960,
648414.4, 648693.3),
BIC = c(560764.5, 547394.6, 546340.1, 542595.9, 541679.7, 530875.1, 530103.3, 530325.6,
532040.8, 533124, 534002.2, 535596.8, 537308.2, 538675.8, 540240.8, 542570.1,
545001.7, 545461.8, 547935.8, 550088.5, 551988.9, 553643.5, 681374.8, 686103.9,
689834.1, 691384.5)
)
# Melt the data for better visualization
library(reshape2)
df_melted <- melt(df, id.vars = "Model", variable.name = "Criterion", value.name = "Value")
line_types <- c("dotdash", "longdash")
# Plot
p4 <- ggplot(df_melted, aes(x = Model, y = Value, color = Criterion, shape=Criterion)) +
geom_line() +
geom_point(size=1.5) +
labs(
x = "Number of factors",
y = "Fit index")+
scale_linetype_manual(values = line_types, name = "MIRT") +  # Rename legend title
scale_color_manual(labels = c("MIRT (AIC)", "MIRT (BIC)"), values = c("#222222", "darkgrey"),name = "") +
scale_shape_manual(labels = c("MIRT (AIC)", "MIRT (BIC)"), values = c(1, 2),name = "") +
theme_classic()+
scale_x_continuous(breaks = c(1,5,10,15,20,25))+
theme(
text = element_text(family = "Times"),
axis.title = element_text(family = "Times", "bold"),
axis.text = element_text(family = "Times"),
legend.text = element_text(family = "Times"),
legend.title = element_text(family = "Times")
)+
coord_cartesian(xlim = c(1, 26))+  # Set a fixed range for the x-axis
guides(color = guide_legend(override.aes = list(size = 3)),  # Increase the size of shapes in the legend
shape = guide_legend(override.aes = list(size = 5)))  # Increase the size of shapes in the legend
# cowplot alighned
#library(cowplot)
# Arrange plots p1 to p4 in a 2x2 grid
#plot_grid(p1, p2, p3, p4, ncol = 2)
#plot_grid( p5,p6,p7, ncol = 3)
library(patchwork)
# Arrange plots p1 to p7 in two columns
#combined_plot <- p1 / p2 / p3 / p4 / p5 / p6 / p7 + plot_layout(ncol = 2)
# Arrange plots p1 to p7 in two columns with different heights
#combined_plot <- p1 / p5 / p2 / p6 / p3 / p7 / p4 +
#  plot_layout(ncol = 2)
#combined_plot1 <- (p1 + p2 + p3 + plot_layout(guides = 'collect')) / p4 + plot_layout(ncol = 1, guides = 'keep' ,axes = "collect")
#combined_plot2 <- (p1 + p2 + p3 + p4 + plot_layout(ncol = 1, guides = 'collect' ,axes = "collect")
#                   )
#combined_plot2 <- ((p1 + p2 + p3 + plot_layout(ncol = 1, guides = 'collect' ,axes = "collect")) +p4+ plot_layout(ncol = 1, guides = 'collect' ,axes = "collect")  )
#print(combined_plot2)
#print(combined_plot2 +
#    geom_vline(xintercept = 6, linetype="dotted", size = 0.3) +
#    geom_vline(xintercept = 22, linetype="dotted", size = 0.3) +
#  annotate("text", x = 6, y = 680000, label = "lower") +
#  annotate("text", x = 22, y = 680000, label = "upper"))
design <- "
1
2
3
4
"
library(ggrepel)
#print((p1 + geom_vline(xintercept = 6, linetype="dotted", size = 0.3) +
#  geom_vline(xintercept = 22, linetype="dotted", size = 0.3))+ (p2 + geom_vline(xintercept = 6, #linetype="dotted", size = 0.3) +
#  geom_vline(xintercept = 22, linetype="dotted", size = 0.3)) + (p3 + geom_vline(xintercept = 6, #linetype="dotted", size = 0.3) +
#  geom_vline(xintercept = 22, linetype="dotted", size = 0.3)) + (p4 + geom_vline(xintercept = 6, #linetype="dotted", size = 0.3) +
#                                                                   geom_vline(xintercept = 22, #linetype="dotted", size = 0.3)) + plot_layout(design = design ,axes = "collect", guides="collect"))+
#geom_point(aes(x = 6, y = 520000), # red is the prediction for my car
#    color = "red",
#   size = 3, show.legend = FALSE
# ) +
#  geom_point(aes(x = 22, y = 535000), # green is the actual mpg of my car
#    color = "red",
#    size = 3,show.legend = FALSE) +
#geom_label(aes(x=7,y=570000, label = "lower limit"), size=3,
#             hjust = 0.5, vjust = "inward",
#             nudge_x = 0.05, nudge_y = 1,
#             label.padding = unit(0.5, "lines"), color = "black") +
#  geom_label(aes(x=20,y=585000, label = "upper limit"), size=3,
#            hjust = 0.5, vjust = "inward",
#             nudge_x = 0.05, nudge_y = 2,
#             label.padding = unit(0.5, "lines"), color = "black") +
#    geom_segment(aes(x = 6, y = 520000, xend = 7, yend = 570000), color = "#222222", linetype = "solid") +
#  geom_segment(aes(x = 22, y = 535000, xend = 20, yend = 585000), color = "#222222", linetype = "solid")
p4 <- p4 +
geom_vline(xintercept = 6, linetype = "dotted", size = 0.3) +
geom_vline(xintercept = 22, linetype = "dotted", size = 0.3)+
plot_layout(ncol = 1, guides = 'collect', axis = "collect")+
geom_point(aes(x = 6, y = 520000), # red is the prediction for my car
color = "red",
size = 3, show.legend = FALSE
) +
geom_point(aes(x = 22, y = 535000), # green is the actual mpg of my car
color = "red",
size = 3,show.legend = FALSE
) +
geom_label(aes(x=8.5,y=570000, label = "lower limit"), size=3,
hjust = 0.5, vjust = "inward",
nudge_x = 0.05, nudge_y = 1,
label.padding = unit(0.5, "lines"), color = "black") +
geom_label(aes(x=19,y=585000, label = "upper limit"), size=3,
hjust = 0.5, vjust = "inward",
nudge_x = 0.05, nudge_y = 2,
label.padding = unit(0.5, "lines"), color = "black") +
geom_segment(aes(x = 6, y = 520000, xend = 8.5, yend = 570000), color = "#222222", linetype = "solid") +
geom_segment(aes(x = 22, y = 535000, xend = 19, yend = 585000), color = "#222222", linetype = "solid")
# Combine plots without using 'collect' for axes
combined_plot <- (
(p1 )+
(p2 +
geom_hline(yintercept = 0.08, linetype = "dotted", size = 0.3)) +
(p3 +
geom_hline(yintercept = 0.5, linetype = "dotted", size = 0.3))+ plot_layout(ncol = 1, guides = 'collect')+
geom_point(aes(x = 15, y = 0.5), # red is the prediction for my car
color = "red",
size = 2, show.legend = FALSE
) +
geom_point(aes(x = 20, y = 0.5), # green is the actual mpg of my car
color = "red",
size = 2,show.legend = FALSE
) +
geom_label(aes(x=17,y=0.01, label = "cross-over"), size=3,
hjust = 0.5, vjust = "inward",
nudge_x = 0.2, nudge_y = 0.2,
label.padding = unit(0.5, "lines"), color = "black") +
geom_segment(aes(x = 15, y = 0.5, xend = 17.4, yend = 0.38), color = "#222222", linetype = "solid") +
geom_segment(aes(x = 20, y = 0.5, xend = 17.4, yend = 0.38), color = "#222222", linetype = "solid")
) + p4
plot(combined_plot)
#g <- ggplotGrob(combined_plot)
#plot(g)
#leg <- g$grobs[[8]]
#leg$heights[3] <- unit(1,"null")
#leg$heights[1] <- unit(0,"null")
#plot(g)
#newss <- combined_plot
#  newss[[4]][["guides"]][["colour"]]$title.vjust <- -28
#  newss[[4]][["guides"]][["colour"]]$label.vjust <- -5
#print(newss)
#- DFS dazu plotten
#- Differenzen von den Chiquadrat
#** Chi2 geteilt durch Freiheitsgrade muss unter 5 sein. **
#  -> Kriterium, sollte unter 5 sein dann highlighten in dem Bereich.
#FÜr die einzelnen Sachen Kriteiren einzeichnen. Für SMR, Bei Varianz dann schauen was der Cutoff ist.
load("Tables/anova_results.RData")
#loadingtabu <- readRDS("Tables/Tablesloading.rds")
loadingtabu <- readRDS("Tables/Tablesloading_test.rds")
library(tidyverse)
# filters out specific loading below .3
# Subset the dataframe to include only columns 3 to 9
#subset_data <- loadingtabu[, 3:9]
# Filter rows where at least one cell in columns 3 to 9 has a value greater than 0.3
#loadingtabu <- loadingtabu %>%
#  filter(rowSums(subset_data > 0.3, na.rm = TRUE) > 0)
# Load required libraries
library(papaja)
library(dplyr)
# Convert character columns to numeric
loadingtable <- loadingtabu %>% mutate(across(λS1:λS8, as.numeric))
# Remove row names from the dataframe
rownames(loadingtable) <- NULL
# Modify column names to include lambda with subscripted G and S1-S8
col_names <- c("Item", "$\\lambda_{G}$", "$\\lambda_{S1}$", "$\\lambda_{S2}$", "$\\lambda_{S3}$", "$\\lambda_{S4}$", "$\\lambda_{S5}$", "$\\lambda_{S6}$", "$\\lambda_{S7}$", "$\\lambda_{S8}$","$a_{G}$","$a_{S}$","$d_{1}$" ,"$d_{2}$", "$d_{3}$" , "$d_{4}$" , "$d_{5}$" , "$d_{6}$","$h^2$", "$M$", "$SD$" )
colnames(loadingtable) <- col_names
# Define a function to apply color coding based on a condition
apply_color <- function(value, threshold_low, threshold_high) {
if (is.na(value)) {
return("")  # Return empty string for missing values
} else if (value >= threshold_high) {
return(sprintf("\\cellcolor{lightgray} %.2f", value))  # Light gray for values above threshold_high
} else if (value <= threshold_low) {
return(sprintf("\\fbox{\\cellcolor{white} %.2f}", value))  # Frame and light gray for values above threshold_high
} else {
return(sprintf("%.2f", value))  # Normal formatting for other values
}
}
# Apply color coding to all numeric columns except the first one (Item)
threshold_low <- 0.3
threshold_high <- 0.5
for (col in colnames(loadingtable)[2:10]) {
loadingtable[[col]] <- sapply(loadingtable[[col]], apply_color, threshold_low, threshold_high)
}
# Manually add the anchor tag to the first cell of the first column
loadingtable$Item[1] <- sprintf('\\phantomsection\\label{behav_1_133_r}\\hyperref[behav_1_133_r]{\\textcolor{blue}{%s}}', loadingtable$Item[1])
loadingtable$Item[2] <- sprintf('\\phantomsection\\label{behav_1_129_r}\\hyperref[behav_1_129_r]{\\textcolor{blue}{%s}}', loadingtable$Item[2])
loadingtable$Item[3] <- sprintf('\\phantomsection\\label{behav_1_132_r}\\hyperref[behav_1_132_r]{\\textcolor{blue}{%s}}', loadingtable$Item[3])
loadingtable$Item[4] <- sprintf('\\phantomsection\\label{wunsc_1_154_r}\\hyperref[wunsc_1_154_r]{\\textcolor{blue}{%s}}', loadingtable$Item[4])
loadingtable$Item[5] <- sprintf('\\phantomsection\\label{selbv_1_198_r}\\hyperref[selbv_1_198_r]{\\textcolor{blue}{%s}}', loadingtable$Item[5])
loadingtable$Item[6] <- sprintf('\\phantomsection\\label{ableh_2_081_r}\\hyperref[ableh_2_081_r]{\\textcolor{blue}{%s}}', loadingtable$Item[6])
loadingtable$Item[7] <- sprintf('\\phantomsection\\label{sinnz_2_312}\\hyperref[sinnz_2_312]{\\textcolor{blue}{%s}}', loadingtable$Item[7])
loadingtable$Item[8] <- sprintf('\\phantomsection\\label{sinnz_1_300}\\hyperref[sinnz_1_300]{\\textcolor{blue}{%s}}', loadingtable$Item[8])
loadingtable$Item[9] <- sprintf('\\phantomsection\\label{posit_1_167}\\hyperref[posit_1_167]{\\textcolor{blue}{%s}}', loadingtable$Item[9])
loadingtable$Item[10] <- sprintf('\\phantomsection\\label{selbw_2_325}\\hyperref[selbw_2_325]{\\textcolor{blue}{%s}}', loadingtable$Item[10])
loadingtable$Item[11] <- sprintf('\\phantomsection\\label{akzep_3_019}\\hyperref[akzep_3_019]{\\textcolor{blue}{%s}}', loadingtable$Item[11])
loadingtable$Item[12] <- sprintf('\\phantomsection\\label{optim_2_211_r}\\hyperref[optim_2_211_r]{\\textcolor{blue}{%s}}', loadingtable$Item[12])
loadingtable$Item[13] <- sprintf('\\phantomsection\\label{zukun_1_339}\\hyperref[zukun_1_339]{\\textcolor{blue}{%s}}', loadingtable$Item[13])
loadingtable$Item[14] <- sprintf('\\phantomsection\\label{zukun_2_347}\\hyperref[zukun_2_347]{\\textcolor{blue}{%s}}', loadingtable$Item[14])
loadingtable$Item[15] <- sprintf('\\phantomsection\\label{zukun_2_344}\\hyperref[zukun_2_344]{\\textcolor{blue}{%s}}', loadingtable$Item[15])
loadingtable$Item[16] <- sprintf('\\phantomsection\\label{humor_1_082}\\hyperref[humor_1_082]{\\textcolor{blue}{%s}}', loadingtable$Item[16])
loadingtable$Item[17] <- sprintf('\\phantomsection\\label{humor_1_087}\\hyperref[humor_1_087]{\\textcolor{blue}{%s}}', loadingtable$Item[17])
loadingtable$Item[18] <- sprintf('\\phantomsection\\label{humor_1_085_r}\\hyperref[humor_1_085_r]{\\textcolor{blue}{%s}}', loadingtable$Item[18])
loadingtable$Item[19] <- sprintf('\\phantomsection\\label{famil_1_373}\\hyperref[famil_1_373]{\\textcolor{blue}{%s}}', loadingtable$Item[19])
loadingtable$Item[20] <- sprintf('\\phantomsection\\label{famil_1_371}\\hyperref[famil_1_371]{\\textcolor{blue}{%s}}', loadingtable$Item[20])
loadingtable$Item[21] <- sprintf('\\phantomsection\\label{famil_1_378}\\hyperref[famil_1_378]{\\textcolor{blue}{%s}}', loadingtable$Item[21])
loadingtable$Item[22] <- sprintf('\\phantomsection\\label{sozia_1_355}\\hyperref[sozia_1_355]{\\textcolor{blue}{%s}}', loadingtable$Item[22])
loadingtable$Item[23] <- sprintf('\\phantomsection\\label{sozia_1_038}\\hyperref[sozia_1_038]{\\textcolor{blue}{%s}}', loadingtable$Item[23])
loadingtable$Item[24] <- sprintf('\\phantomsection\\label{sozia_1_354}\\hyperref[sozia_1_354]{\\textcolor{blue}{%s}}', loadingtable$Item[24])
loadingtable$Item[25] <- sprintf('\\phantomsection\\label{physi_1_264}\\hyperref[physi_1_264]{\\textcolor{blue}{%s}}', loadingtable$Item[25])
loadingtable$Item[26] <- sprintf('\\phantomsection\\label{physi_1_263}\\hyperref[physi_1_263]{\\textcolor{blue}{%s}}', loadingtable$Item[26])
loadingtable$Item[27] <- sprintf('\\phantomsection\\label{ablen_1_048}\\hyperref[ablen_1_048]{\\textcolor{blue}{%s}}', loadingtable$Item[27])
loadingtable$Item[28] <- sprintf('\\phantomsection\\label{umgan_1_221}\\hyperref[umgan_1_221]{\\textcolor{blue}{%s}}', loadingtable$Item[28])
loadingtable$Item[29] <- sprintf('\\phantomsection\\label{umgan_1_222}\\hyperref[umgan_1_222]{\\textcolor{blue}{%s}}', loadingtable$Item[29])
loadingtable$Item[30] <- sprintf('\\phantomsection\\label{aktiv_1_180}\\hyperref[aktiv_1_180]{\\textcolor{blue}{%s}}', loadingtable$Item[30])
loadingtable <- loadingtable %>%
select(-"$M$",  -"$SD$")
# Create an APA-formatted table with mathematical formulas
apa_table(
loadingtable,
col_spanners = list("Standardized factor loadings (8D bifactor)" = c(2,10),
"Discrimination" = c(11,12),
"Difficulty" = c(13, 18)),  # Adjusted col_spanners
caption = "Discrimination, difficulty and item parameters for the Bifactor MIRT Model",
note = "associatied labels are: Lamda1: Factorname.  Lamda2: Factorname.Lamda3: Factorname.Lamda4: Factorname.Lamda5: Factorname.
Explain each parameter. d:   if d1=5, d2=1, d3=-1, the probability a respondent with 0 thetas will have 1-plogis(5) = .0067 probability of choosing the first category, plogis(5) - plogis(1) = .262 probability of choosing the second category, plogis(1)-plogis(-1) and plogis(-1) for the third and last categories? from https://groups.google.com/g/mirt-package/c/V0AX2aIXS10
This table includes mathematical symbols and conditional formatting.",
escape = FALSE,
format.args = list(na_string = ""),
placement = "tbp",
landscape = TRUE,
align = "c",
font_size = "footnotesize" # "scriptsize"  # Adjusted font size
)
#Reliability
tabu <- readRDS("Tables/result_stan.rds")
# Calculate squared sum for each column except 'h2'
squared_sums <- sapply(tabu[, !names(tabu) %in% "h2"], function(column) {
sum(column)^2
})
# Calculate the sum of (1 - value) for 'h2' column
h2_adjusted_sum <- sum(1 - tabu$h2)
w <- ( as.numeric(squared_sums[1]) + as.numeric(sum(squared_sums[2:9])) ) / ( as.numeric(squared_sums[1])  + as.numeric(sum(squared_sums[2:9])) + as.numeric(h2_adjusted_sum) )
wh <- as.numeric(squared_sums[1])/ (as.numeric(squared_sums[1]) + as.numeric(sum(squared_sums[2:9])) + as.numeric(h2_adjusted_sum))
# Define specific groups
specific_groups <- list(
SPEC1 = c("behav_1_133_r", "behav_1_129_r", "behav_1_132_r", "wunsc_1_154_r", "selbv_1_198_r", "ableh_2_081_r"),
SPEC2 = c("sinnz_2_312", "sinnz_1_300", "posit_1_167", "selbw_2_325", "akzep_3_019", "optim_2_211_r"),
SPEC3 = c("zukun_1_339", "zukun_2_347", "zukun_2_344"),
SPEC4 = c("humor_1_082", "humor_1_087", "humor_1_085_r"),
SPEC5 = c("famil_1_373", "famil_1_371", "famil_1_378"),
SPEC6 = c("sozia_1_355", "sozia_1_038", "sozia_1_354"),
SPEC7 = c("physi_1_264", "physi_1_263", "ablen_1_048"),
SPEC8 = c("umgan_1_221", "umgan_1_222", "aktiv_1_180")
)
# Create a list to store the subset data frames
grouped_tabu <- lapply(specific_groups, function(items) {
# Subset the data frame
subset_df <- tabu[rownames(tabu) %in% items, ]
# Drop columns that contain only zeros
subset_df <- subset_df[, colSums(subset_df != 0) > 0]
# Ensure the data frame has only three columns
if (ncol(subset_df) > 3) {
subset_df <- subset_df[, 1:3]
}
# Rename the columns to "g", "s", "h"
colnames(subset_df) <- c("g", "s", "h")
return(subset_df)
})
# Name the elements of the list
names(grouped_tabu) <- names(specific_groups)
# Function to apply the formula
apply_formula <- function(df) {
sum_g <- sum(as.numeric(df$g))
sum_s <- sum(as.numeric(df$s))
sum_h <- sum(as.numeric(1 - df$h))
result <- (sum_s^2) / (sum_g^2 + sum_s^2 + sum_h)
return(result)
}
# Apply the formula to each group
results <- lapply(grouped_tabu, apply_formula)
wh1 <-  results$SPEC1 #avoidance
wh2 <-  results$SPEC2 #self perception
wh3 <-  results$SPEC3 #zukunftsplanung
wh4 <-  results$SPEC4 #social competence
wh5 <-  results$SPEC5 #family cohesion
wh6 <-  results$SPEC6 #soziale_ressourcen
wh7 <-  results$SPEC7 #distraction
wh8 <-  results$SPEC8 #active coping
RCQL <- readRDS("Tables/RCQL.rds")
rows_to_keep <- c(
"behav_1_133_r", "behav_1_129_r", "behav_1_132_r" ,"wunsc_1_154_r", "selbv_1_198_r", "ableh_2_081_r",  #6 items
"sinnz_2_312", "sinnz_1_300", "posit_1_167", "selbw_2_325", "akzep_3_019", "optim_2_211_r",            #6 items
"zukun_1_339", "zukun_2_347", "zukun_2_344",                                                           #3 items 39 43 41
"humor_1_082", "humor_1_087", "humor_1_085_r",                                                         #3 items 46 48 47
"famil_1_373", "famil_1_371", "famil_1_378",                                                           #3 items 31 30 33
"sozia_1_355", "sozia_1_038", "sozia_1_354",                                                           #3 items 91 87 90
"physi_1_264", "physi_1_263", "ablen_1_048",                                                           #3 items 69 68 27
"umgan_1_221", "umgan_1_222", "aktiv_1_180"                                                            #3 items 25 26  9
)
#highlight final itemIDs
rows_to_color <- which(RCQL$item_name_auswertung %in% rows_to_keep)
# Finding the row numbers corresponding to these item names in their exact order
rows_to_color_order <- match(rows_to_keep, RCQL$item_name_auswertung)
RCQL <- RCQL %>%
select(-item_name_auswertung) %>%
mutate(Inverse = ifelse(is.na(Inverse), " ", Inverse))
col_names <- c("ID", "Itemtext (German)", "Factor", "Subfactor", "R", "$M$", "$SD$" )
colnames(RCQL) <- col_names
RCQL <- RCQL %>%
mutate(`$M$` = sprintf("%.2f", `$M$`),
`$SD$` = sprintf("%.2f", `$SD$`))
# Function to apply color to specific rows and columns and add an asterisk to the ID column
color_rows_cols <- function(df, rows_to_color, cols_to_color, color) {
for (col in cols_to_color) {
if (col == "ID") {
df[[col]][rows_to_color] <- sprintf("\\cellcolor{%s}{%s}", color, df[[col]][rows_to_color])
} else {
df[[col]][rows_to_color] <- sprintf("\\cellcolor{%s}{%s}", color, df[[col]][rows_to_color])
}
}
return(df)
}
# Apply the function to color specific rows (e.g., rows 1 to 4) for the specified columns
# rows_to_color <- 1:4 #specify correct ones here (was a placeholder)
cols_to_color <- c("ID", "Itemtext (German)", "R", "$M$", "$SD$")
color <- "lightgray"  # Define the color, e.g., light blue #"blue!10"
RCQL <- color_rows_cols(RCQL, rows_to_color, cols_to_color, color)
# Vector of replacement values
replacement <- c(1:30)
positions <- c(13, 11, 12, 96, 76, 74, 61, 54, 71, 82, 2, 66, 39, 43, 41, 46, 48, 47, 31, 30, 33, 91, 87, 90, 69, 68, 27, 25, 26, 9)
# Perform replacement
RCQL$ID[positions] <- paste0(positions, "(", replacement, ")")
# Referencing
# Backward referencing:
# RCQL$ID[1] <- sprintf('\\phantomsection\\label{custommk}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[1]) #muster
# 13 11 12 96 76 74 61 54 71 82  2 66 39 43 41 46 48 47 31 30 33 91 87 90 69 68 27 25 26  9
RCQL$ID[13] <- sprintf('\\phantomsection\\label{behav_1_133_r}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[13])
RCQL$ID[11] <- sprintf('\\phantomsection\\label{behav_1_129_r}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[11])
RCQL$ID[12] <- sprintf('\\phantomsection\\label{behav_1_132_r}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[12])
RCQL$ID[96] <- sprintf('\\phantomsection\\label{wunsc_1_154_r}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[96])
RCQL$ID[76] <- sprintf('\\phantomsection\\label{selbv_1_198_r}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[76])
RCQL$ID[74] <- sprintf('\\phantomsection\\label{ableh_2_081_r}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[74])
RCQL$ID[61] <- sprintf('\\phantomsection\\label{sinnz_2_312}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[61])
RCQL$ID[54] <- sprintf('\\phantomsection\\label{sinnz_1_300}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[54])
RCQL$ID[71] <- sprintf('\\phantomsection\\label{posit_1_167}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[71])
RCQL$ID[82] <- sprintf('\\phantomsection\\label{selbw_2_325}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[82])
RCQL$ID[2] <- sprintf('\\phantomsection\\label{akzep_3_019}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[2])
RCQL$ID[66] <- sprintf('\\phantomsection\\label{optim_2_211_r}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[66])
RCQL$ID[39] <- sprintf('\\phantomsection\\label{zukun_1_339}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[39])
RCQL$ID[43] <- sprintf('\\phantomsection\\label{zukun_2_347}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[43])
RCQL$ID[41] <- sprintf('\\phantomsection\\label{zukun_2_344}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[41])
RCQL$ID[46] <- sprintf('\\phantomsection\\label{humor_1_082}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[46])
RCQL$ID[48] <- sprintf('\\phantomsection\\label{humor_1_087}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[48])
RCQL$ID[47] <- sprintf('\\phantomsection\\label{humor_1_085_r}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[47])
RCQL$ID[31] <- sprintf('\\phantomsection\\label{famil_1_373}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[31])
RCQL$ID[30] <- sprintf('\\phantomsection\\label{famil_1_371}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[30])
RCQL$ID[33] <- sprintf('\\phantomsection\\label{famil_1_378}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[33])
RCQL$ID[91] <- sprintf('\\phantomsection\\label{sozia_1_355}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[91])
RCQL$ID[87] <- sprintf('\\phantomsection\\label{sozia_1_038}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[87])
RCQL$ID[90] <- sprintf('\\phantomsection\\label{sozia_1_354}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[90])
RCQL$ID[69] <- sprintf('\\phantomsection\\label{physi_1_264}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[69])
RCQL$ID[68] <- sprintf('\\phantomsection\\label{physi_1_263}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[68])
RCQL$ID[27] <- sprintf('\\phantomsection\\label{ablen_1_048}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[27])
RCQL$ID[25] <- sprintf('\\phantomsection\\label{umgan_1_221}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[25])
RCQL$ID[26] <- sprintf('\\phantomsection\\label{umgan_1_222}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[26])
RCQL$ID[9] <- sprintf('\\phantomsection\\label{aktiv_1_180}\\hyperref[table1]{\\textcolor{blue}{%s}}', RCQL$ID[9])
RCQL <- RCQL %>%
mutate(Inverse = ifelse(Inverse != "x", "   ", Inverse))
View(RCQL)
View(RCQL)
RCQL$Inverse
RCQL$Inverse
unique(RCQL$Inverse)
View(RCQL)
RCQL <- RCQL %>%
mutate(R = ifelse(R = "\cellcolor{lightgray}{ }", "\cellcolor{lightgray}{  }", R))
View(RCQL)
RCQL$R
library(tidyverse)
tinytex::tlmgr_update()
tinytex::tlmgr_update('--self')
tinytex::tlmgr_update('--all')
tinytex::tlmgr_update()
tinytex::tl_pkgs()
#setwd("/Users/cselva1/Desktop/BF_export/Analysis/paper")
#setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library("papaja")
#r_refs("r-references.bib")
# This is needed to include captions above.
source("figcap-above.R")
knitr::knit_hooks$set(plot = figcapabove_hook_plot_tex)
load("Tables/anova_results.RData")
View(anova_results)
