itemsets_IRT <- list()
itemsets_IRT_fit <- list()
# grouping procedure
factor_g0 <- c("Ablehnung (-)", "Ablenkung", "Aktives Coping", "Akzeptanz", "Behavioural disengagement (-)","Religion"  ,
"Familiärer Zusammenhalt", "Humor", "Instrumentelle Unterstützung", "Kognitive Rekonstruierung",
"Mentale Anstrengung", "Moral, Ethik und Altruismus", "Optimismus",
"Positives Denken", "Selbstvorwurf (-)", "Selbstwahrnehmung",
"Sinn, Zweck/Bestimmung und Entwicklung", "Soziale Unterstützung", "Strukturiertheit",
"Umgang mit Angst", "Vorbilder", "Wunsch Denken (-)", "Zukunftsplanung")
factor_r1 <-  c("Familiärer Zusammenhalt", "Mentale Anstrengung", "Moral, Ethik und Altruismus","Optimismus",
"Physische Anstrengung", "Selbstwahrnehmung", "Sinn, Zweck/Bestimmung und Entwicklung",
"Strukturiertheit","Umgang mit Angst", "Vorbilder","Zukunftsplanung")
factor_c2 <-  c("Soziale Unterstützung","Akzeptanz" ,"Instrumentelle Unterstützung"  ,"Ablenkung",
"Ablehnung (-)"  ,"Humor" ,"Behavioural disengagement (-)", "Kognitive Rekonstruierung" ,
"Wunsch Denken (-)" ,"Positives Denken","Aktives Coping" , "Selbstvorwurf (-)")
map_items_to_factor <- function(factor_facets, codebook)  {
# Filtering the codebook based on the factor facets
items_for_factor <- codebook$item_name_auswertung[codebook$name_facette %in% factor_facets]
return(items_for_factor)
}
# Mapping items for each factor
items_g0 <- map_items_to_factor(factor_g0, codebook)
items_r1 <- map_items_to_factor(factor_r1, codebook)
items_c2 <- map_items_to_factor(factor_c2, codebook)
# Map your data structure to the example by Chalmers
# Extracting the item names from the dataset
all_items <- colnames(data_EGA)
# Create the 'specific' vector based on the item order in 'data_rcitems_3_noNA'
specific <- numeric(length(all_items))
for (i in seq_along(all_items)) {
if (all_items[i] %in% items_r1) {
specific[i] <- 1
} else if (all_items[i] %in% items_c2) {
specific[i] <- 2
} else {
# Assuming that items not in r1 or c2 are general items and not assigned to a specific factor.
specific[i] <- 0
}
}
specific
# Run the bfactor model
#model2_bi <- bfactor(data_EGA, specific, technical = list(NCYCLES=2000))
#Iteration: 768, Log-Lik: -175721.312, Max-Change: 0.00010 (2024-05-21)
#save(model2_bi, file = "mirtmodels/e_modele/model2_bi.RData")
load(file = "mirtmodels/e_modele/model2_bi.RData")
# --------
# Model 3: Ayers Model
# --------
newcodebook <- codebook %>%
filter(codebook$item_name_auswertung %in% names(data_EGA))
avoidance <- c("Behavioural disengagement (-)", "Ablehnung (-)" ,  "Selbstvorwurf (-)" ,
"Umgang mit Angst"  ,"Wunsch Denken (-)")
cognitive_reconstruction <- c("Akzeptanz" ,"Humor", "Positives Denken",    "Sinn, Zweck/Bestimmung und Entwicklung",
"Selbstwahrnehmung", "Optimismus"   ,"Kognitive Rekonstruierung")
problem_solving <- c("Aktives Coping" , "Zukunftsplanung" )
distraction <- c("Ablenkung", "Soziale Unterstützung", "Physische Anstrengung", "Mentale Anstrengung")
support_seeking <-  c("Instrumentelle Unterstützung", "Familiärer Zusammenhalt")
# Mapping from factor names to item names
map_factor_to_items <- function(factor_list, newcodebook) {
mapped_items <- newcodebook$item_name_auswertung[newcodebook$name_facette %in% factor_list]
return(mapped_items)
}
# Map each factor list to corresponding item names
mapped_avoidance <- map_factor_to_items(avoidance, newcodebook)
mapped_cognitive_reconstruction <- map_factor_to_items(cognitive_reconstruction, newcodebook)
mapped_problem_solving <- map_factor_to_items(problem_solving, newcodebook)
mapped_distraction <- map_factor_to_items(distraction, newcodebook)
mapped_support_seeking <- map_factor_to_items(support_seeking, newcodebook)
# Create the 'specific' vector based on the item order in 'combined_df'
all_items <- colnames(data_EGA)
specific <- numeric(length(all_items))
for (i in seq_along(all_items)) {
if (all_items[i] %in% mapped_avoidance) {
specific[i] <- 1
} else if (all_items[i] %in% mapped_cognitive_reconstruction) {
specific[i] <- 2
} else if (all_items[i] %in% mapped_problem_solving) {
specific[i] <- 3
} else if (all_items[i] %in% mapped_distraction) {
specific[i] <- 4
} else if (all_items[i] %in% mapped_support_seeking) {
specific[i] <- 5
} else {
specific[i] <- 0
}
}
specific
# Run the bfactor model
#model3_ayers <- bfactor(data_EGA, specific, technical = list(NCYCLES=2000))
#Iteration: 1707, Log-Lik: -174307.895, Max-Change: 0.00010 (2024-05-21)
#save(model3_ayers, file = "mirtmodels/e_modele/model3_ayers.RData")
load(file = "mirtmodels/e_modele/model3_ayers.RData")
# --------
# Model 4: Kaiser Model with coping
# --------
#kaiser raw
selbstwahrnehmung <- c("Selbstwahrnehmung", "Optimismus", "Sinn, Zweck/Bestimmung und Entwicklung",
"Positives Denken", "Akzeptanz")
zukunftsplanung <- c("Zukunftsplanung")
soziale_kompetenz <- c("Humor","Instrumentelle Unterstützung")
familiärer_zusammenhalt <- c("Familiärer Zusammenhalt")
soziale_ressourcen <- c("Soziale Unterstützung")
#extension
coping <- c("Ablenkung",  "Kognitive Rekonstruierung"  , "Physische Anstrengung", "Mentale Anstrengung", "Aktives Coping", "Umgang mit Angst","Behavioural disengagement (-)" , "Ablehnung (-)"  , "Selbstvorwurf (-)"  ,"Wunsch Denken (-)")
# Update the mapping function for new factors
mapped_selbstwahrnehmung <- map_factor_to_items(selbstwahrnehmung, newcodebook)
mapped_zukunftsplanung <- map_factor_to_items(zukunftsplanung, newcodebook)
mapped_soziale_kompetenz <- map_factor_to_items(soziale_kompetenz, newcodebook)
mapped_familiärer_zusammenhalt <- map_factor_to_items(familiärer_zusammenhalt, newcodebook)
mapped_soziale_ressourcen <- map_factor_to_items(soziale_ressourcen, newcodebook)
mapped_coping <- map_factor_to_items(coping, newcodebook)
# Create the 'specific' vector based on the item order in 'combined_df'
all_items <- colnames(data_EGA)
specific <- numeric(length(all_items))
for (i in seq_along(all_items)) {
if (all_items[i] %in% mapped_soziale_ressourcen) {
specific[i] <- 1
} else if (all_items[i] %in% mapped_selbstwahrnehmung) {
specific[i] <- 2
} else if (all_items[i] %in% mapped_zukunftsplanung) {
specific[i] <- 3
} else if (all_items[i] %in% mapped_soziale_kompetenz) {
specific[i] <- 4
} else if (all_items[i] %in% mapped_familiärer_zusammenhalt) {
specific[i] <- 5
} else if (all_items[i] %in% mapped_coping) {
specific[i] <- 6
} else {
specific[i] <- 0
}
}
specific
# Run the bfactor model
#model4_kaisercope <- bfactor(data_EGA, specific, technical = list(NCYCLES=2000))
#Iteration: 1132, Log-Lik: -174214.811, Max-Change: 0.00010 (2024-05-21)
#save(model4_kaisercope, file = "mirtmodels/e_modele/model4_kaisercope.RData")
load(file = "mirtmodels/e_modele/model4_kaisercope.RData")
# --------
# Model 5: Kaiser/Ayers Model
# --------
#kaiser
selbstwahrnehmung <- c("Selbstwahrnehmung", "Optimismus", "Sinn, Zweck/Bestimmung und Entwicklung",
"Positives Denken", "Akzeptanz")
zukunftsplanung <- c("Zukunftsplanung")
soziale_kompetenz <- c("Humor","Instrumentelle Unterstützung")
familiärer_zusammenhalt <- c("Familiärer Zusammenhalt")
soziale_ressourcen <- c("Soziale Unterstützung" )
#ayers
distraction <- c("Ablenkung",  "Kognitive Rekonstruierung"  , "Mentale Anstrengung","Physische Anstrengung")
active_coping <- c("Aktives Coping", "Umgang mit Angst")
avoidance <- c("Behavioural disengagement (-)" , "Ablehnung (-)"  , "Selbstvorwurf (-)"  ,
"Wunsch Denken (-)")
# Mapping from factor names to item names
map_factor_to_items <- function(factor_list, newcodebook) {
mapped_items <- newcodebook$item_name_auswertung[newcodebook$name_facette %in% factor_list]
return(mapped_items)
}
# Update the mapping function for new factors
mapped_selbstwahrnehmung <- map_factor_to_items(selbstwahrnehmung, newcodebook)
mapped_zukunftsplanung <- map_factor_to_items(zukunftsplanung, newcodebook)
mapped_soziale_kompetenz <- map_factor_to_items(soziale_kompetenz, newcodebook)
mapped_familiärer_zusammenhalt <- map_factor_to_items(familiärer_zusammenhalt, newcodebook)
mapped_soziale_ressourcen <- map_factor_to_items(soziale_ressourcen, newcodebook)
mapped_distraction <- map_factor_to_items(distraction, newcodebook)
mapped_active_coping <- map_factor_to_items(active_coping, newcodebook)
mapped_avoidance <- map_factor_to_items(avoidance, newcodebook)
# Create the 'specific' vector based on the item order in 'combined_df'
all_items <- c(mapped_selbstwahrnehmung
,mapped_zukunftsplanung
,mapped_soziale_kompetenz
,mapped_familiärer_zusammenhalt
,mapped_soziale_ressourcen
,mapped_distraction
,mapped_active_coping
,mapped_avoidance)
all_items
cat(all_items)
specific <- numeric(length(all_items))
for (i in seq_along(all_items)) {
if (all_items[i] %in% mapped_avoidance) {
specific[i] <- 1
} else if (all_items[i] %in% mapped_selbstwahrnehmung) {
specific[i] <- 2
} else if (all_items[i] %in% mapped_zukunftsplanung) {
specific[i] <- 3
} else if (all_items[i] %in% mapped_soziale_kompetenz) {
specific[i] <- 4
} else if (all_items[i] %in% mapped_familiärer_zusammenhalt) {
specific[i] <- 5
} else if (all_items[i] %in% mapped_soziale_ressourcen) {
specific[i] <- 6
} else if (all_items[i] %in% mapped_distraction) {
specific[i] <- 7
} else if (all_items[i] %in% mapped_active_coping) {
specific[i] <- 8
} else {
specific[i] <- 0
}
}
specific
# Run the bfactor model
#model5_kaiserayers <- bfactor(data_EGA, specific, technical = list(NCYCLES=3000))
# Iteration: 2601, Log-Lik: -173561.729, Max-Change: 0.00010  (2024-05-29)
#save(model5_kaiserayers, file = "mirtmodels/e_modele/model5_kaiserayers.RData")
load(file = "mirtmodels/e_modele/model5_kaiserayers.RData")
# standardized factor loadings
tab <- summary(model5_kaiserayers)
bifactorloading_all_data <- as.data.frame(tab$rotF)
#Focus on the secoundary dimension. With aim of including many theoretical factors contributing to the dimensional atrribute.
# take out  based on content
# statt selbw_1_322 we choose selbw_2_325 for better content valisity
# statt zukun_2_337 we choose zukun_2_344 for better content validity
# add behav_1_132_r for more emphesis on bahavior
# Hauptsache content valide!
rows_to_keep <- c(
"behav_1_133_r", "behav_1_129_r", "behav_1_132_r" ,"wunsc_1_154_r", "selbv_1_198_r", "ableh_2_081_r",  #6 items
"sinnz_2_312", "sinnz_1_300", "posit_1_167", "selbw_2_325", "akzep_3_019", "optim_2_211_r",            #6 items
"zukun_1_339", "zukun_2_347", "zukun_2_344",                                                           #4 items
"humor_1_082", "humor_1_087", "humor_1_085_r",                                                         #4 items
"famil_1_373", "famil_1_371", "famil_1_378",                                                           #4 items
"sozia_1_355", "sozia_1_038", "sozia_1_354",                                                           #4 items
"physi_1_264", "physi_1_263", "ablen_1_048",                                                           #4 items
"umgan_1_221", "umgan_1_222", "aktiv_1_180"                                                            #4 items
)
# Filter the DataFrame to keep only the specified rows
bifactorloading_select_data <- bifactorloading_all_data[rownames(bifactorloading_all_data) %in% rows_to_keep, ]
newcodebook_filtered <- newcodebook %>%
filter(item_name_auswertung %in% rows_to_keep)
data_EGA_final_items <- data_EGA %>%
select(rows_to_keep)
specific_groups <- list(
SPEC1 = c("behav_1_133_r", "behav_1_129_r", "behav_1_132_r", "wunsc_1_154_r", "selbv_1_198_r", "ableh_2_081_r"),
SPEC2 = c("sinnz_2_312", "sinnz_1_300", "posit_1_167", "selbw_2_325", "akzep_3_019", "optim_2_211_r"),
SPEC3 = c("zukun_1_339", "zukun_2_347", "zukun_2_344"),
SPEC4 = c("humor_1_082", "humor_1_087", "humor_1_085_r"),
SPEC5 = c("famil_1_373", "famil_1_371", "famil_1_378"),
SPEC6 = c("sozia_1_355", "sozia_1_038", "sozia_1_354"),
SPEC7 = c("physi_1_264", "physi_1_263", "ablen_1_048"),
SPEC8 = c("umgan_1_221", "umgan_1_222", "aktiv_1_180")
)
# Initialize an empty list to store the assignments
assignments <- list()
# Loop through each column of the dataframe
for (col_name in colnames(data_EGA_final_items)) {
# Initialize the group value as NA
group_value <- NA
# Loop through each specific group
for (i in seq_along(specific_groups)) {
if (col_name %in% specific_groups[[i]]) {
group_value <- i
break
}
}
# Store the assignment in the list
assignments[[col_name]] <- group_value
}
specific <- as.numeric(assignments)
# Print the assignments list
print(specific)
# Run the bfactor model
#model5_kaiserayers_final <- bfactor(data_EGA_final_items, specific, technical = list(NCYCLES=3000))
# Iteration: 726, Log-Lik: -52994.808, Max-Change: 0.00010 (2024-05-31)
#save(model5_kaiserayers_final, file = "mirtmodels/e_modele/model5_kaiserayers_final.RData")
load(file = "mirtmodels/e_modele/model5_kaiserayers_final.RData")
# standardized factor loadings
tab <- summary(model5_kaiserayers_final)
bifactorloading_all_data <- as.data.frame(tab$rotF)
# Unstandardized factor loadings
bifactorloading_all_data_unstan <- as.data.frame(coef(model5_kaiserayers_final, simplify = TRUE)$items) %>% ## Extract raw coefficients from the model, along with their standard errors and confi- dence intervals
select(1:9)
# Create a new data frame with the desired columns
result <- data.frame(
ag = bifactorloading_all_data_unstan$a1,
as = apply(bifactorloading_all_data_unstan[, 2:9], 1, function(row) sum(row[row != 0]))
)
library(rempsyc)
# Inspect bifactor loadings:
#summary() reports the standardised loadings, which take into account the group variance parameters.
tab <- summary(model5_kaiserayers_final)
tabu <- as.data.frame(tab$rotF)
# Add the tab$h2 column to tabu
tabu <- cbind(tabu, h2 = tab$h2)
#stand for reliability
saveRDS(tabu, file = "paper/Tables/result_stan.rds")
# Define a function to reorder columns from S8 to S1 sequentially by their highest to lowest absolute amount
reorder_columns <- function(data) {
for (i in 9:2) {
data <- data[order(-abs(data[, i]), data[, i]), ]
}
return(data)
}
# Apply the function to reorder the columns
tabu <- reorder_columns(tabu)
# Add an additional column with item numbers at position 1
tabu <- cbind(Item = 1:nrow(tabu), tabu)
# Round numeric columns except the first one to 2 digits
tabu[, -1] <- round(tabu[, -1], 2)
tabu[tabu == 0] <- ""
# Define column names with lambda symbol
column_names <- c("Item", "λG", "λS1", "λS2", "λS3", "λS4", "λS5", "λS6", "λS7", "λS8", "h2")
# Rename the columns
colnames(tabu) <- column_names
loadingtabu <- tabu
# Convert loadingtabu to a tibble and set row names as a separate column
loadingtabu <- loadingtabu %>%
rownames_to_column(var = "Row.names")
#coef() reports the raw coefficients from the model, along with their standard errors and confidence intervals
testii <- as.data.frame(coef(model5_kaiserayers_final, simplify = TRUE)$items)[,10:15]
# Merging data frames based on row names
# Convert testii to a tibble and set row names as a separate column
testii <- testii %>%
rownames_to_column(var = "Row.names")
# Merge data frames based on row names
combinio <- full_join(loadingtabu, testii, by = "Row.names")
means <- colMeans(data_EGA) # i changerd this from M to means
sds <- apply(data_EGA, 2, sd) # i changed this from SD to sds
# Create a data frame with means and standard deviations for each item
item_stats <- data.frame(mean = means, sd = sds) %>%
rownames_to_column(var = "Row.names")
# Merge data frames based on row names
combinio <- full_join(combinio, item_stats, by = "Row.names")
combinio <-  combinio %>%
slice(1:30)
#add unstandaized parameter
combinio$ag <- rep(1:30)  # placeholder for a_g parameter
combinio$as <- rep(1:30)  # placeholder for a_g parameter
# overwrite combinio with true values
result <- result %>%
mutate(Row.names_result = rownames(result))
combinio <- as_tibble(combinio)
result <- as_tibble(result)
str(combinio)
str(result)
combinio <- combinio %>%
mutate(ag = case_when(
Row.names %in% result$Row.names_result ~ result$ag[match(Row.names, result$Row.names_result)],
TRUE ~ ag
),
as = case_when(
Row.names %in% result$Row.names_result ~ result$as[match(Row.names, result$Row.names_result)],
TRUE ~ as
))
# Move column 11 to position 17
combinio <- combinio %>%
select(Item, λG, λS1:λS8,ag,as, d1:d6, h2, mean, sd)
# Save the table to your directory
saveRDS(loadingtabu, file = "paper/Tables/Tablesloading.rds")
saveRDS(combinio, file = "paper/Tables/Tablesloading_test.rds")
# --------
# reliability
# --------
tabu <- readRDS("paper/Tables/result_stan.rds") # recovers the prior tabu state
# Calculate squared sum for each column except 'h2'
squared_sums <- sapply(tabu[, !names(tabu) %in% "h2"], function(column) {
sum(column)^2
})
# Calculate the sum of (1 - value) for 'h2' column
h2_adjusted_sum <- sum(1 - tabu$h2)
w <- ( as.numeric(squared_sums[1]) + as.numeric(sum(squared_sums[2:9])) ) / ( as.numeric(squared_sums[1])  + as.numeric(sum(squared_sums[2:9])) + as.numeric(h2_adjusted_sum) )
wh <- as.numeric(squared_sums[1])/ (as.numeric(squared_sums[1]) + as.numeric(sum(squared_sums[2:9])) + as.numeric(h2_adjusted_sum))
# Define specific groups
specific_groups <- list(
SPEC1 = c("behav_1_133_r", "behav_1_129_r", "behav_1_132_r", "wunsc_1_154_r", "selbv_1_198_r", "ableh_2_081_r"),
SPEC2 = c("sinnz_2_312", "sinnz_1_300", "posit_1_167", "selbw_2_325", "akzep_3_019", "optim_2_211_r"),
SPEC3 = c("zukun_1_339", "zukun_2_347", "zukun_2_344"),
SPEC4 = c("humor_1_082", "humor_1_087", "humor_1_085_r"),
SPEC5 = c("famil_1_373", "famil_1_371", "famil_1_378"),
SPEC6 = c("sozia_1_355", "sozia_1_038", "sozia_1_354"),
SPEC7 = c("physi_1_264", "physi_1_263", "ablen_1_048"),
SPEC8 = c("umgan_1_221", "umgan_1_222", "aktiv_1_180")
)
# Create a list to store the subset data frames
grouped_tabu <- lapply(specific_groups, function(items) {
# Subset the data frame
subset_df <- tabu[rownames(tabu) %in% items, ]
# Drop columns that contain only zeros
subset_df <- subset_df[, colSums(subset_df != 0) > 0]
# Ensure the data frame has only three columns
if (ncol(subset_df) > 3) {
subset_df <- subset_df[, 1:3]
}
# Rename the columns to "g", "s", "h"
colnames(subset_df) <- c("g", "s", "h")
return(subset_df)
})
# Name the elements of the list
names(grouped_tabu) <- names(specific_groups)
# Function to apply the formula
apply_formula <- function(df) {
sum_g <- sum(as.numeric(df$g))
sum_s <- sum(as.numeric(df$s))
sum_h <- sum(as.numeric(1 - df$h))
result <- (sum_s^2) / (sum_g^2 + sum_s^2 + sum_h)
return(result)
}
# Apply the formula to each group
results <- lapply(grouped_tabu, apply_formula)
wh1 <-  results$SPEC1 #avoidance
wh2 <-  results$SPEC2 #self perception
wh3 <-  results$SPEC3 #zukunftsplanung
wh4 <-  results$SPEC4 #social competence
wh5 <-  results$SPEC5 #family cohesion
wh6 <-  results$SPEC6 #soziale_ressourcen
wh7 <-  results$SPEC7 #distraction
wh8 <-  results$SPEC8 #active coping
# --------
# Validity
# --------
# Determine the columns to keep from the first 105 columns
cols_to_drop <- setdiff(names(valicombi1_numeric)[1:105], rows_to_keep)
# Create the new dataset
valicombi2_numeric <- valicombi1_numeric %>%
select(-all_of(cols_to_drop))
# Add prefix "rcq_" to the first 30 columns
new_column_names <- names(valicombi2_numeric)
new_column_names[1:30] <- paste0("rcq_", new_column_names[1:30])
names(valicombi2_numeric) <- new_column_names
vali_factors <- c("rcq","brcs", "rs11",
#"rsa", "cope",
"mccs", "swls",
#"ffa",
"bfi_e" ,"bfi_v","bfi_g","bfi_n","bfi_o", "gse", "ppse", "gpsk"
#, "bokx"
)
# Combine factors for easier processing
all_factors <- c(vali_factors)
# Aggregate data by factor prefixes to calculate mean for each factor
factor_means <- sapply(all_factors, function(prefix) {
cols <- grep(paste0("^", prefix), names(valicombi2_numeric))
factor_data <- as.matrix(valicombi2_numeric[, cols])  # Explicitly convert to a matrix
rowMeans(factor_data, na.rm = TRUE)  # Calculate the mean for each row (factor)
})
factor_means
# Convert the list to a data frame
factor_means_df <- as.data.frame(factor_means) %>%
select("rcq", "brcs", "rs11" , "mccs",
"swls", "gse" , "bfi_e" , "bfi_n",
"bfi_v", "bfi_g", "bfi_o", "ppse", "gpsk")
pairwiseCount(factor_means_df)
# Calculate the correlation matrix for the factor means
cor_matrix <- cor(factor_means_df, method = "pearson", use = "pairwise.complete.obs")
test <- apa.cor.table(factor_means_df,filename = "paper/Tables/Validation_corr_matrix.doc",table.number = 3,show.conf.interval = FALSE,  show.sig.stars = FALSE,  landscape = TRUE)
# Extract variable names
variable_names <- attr(test$table.body, "dimnames")[[2]]
values <- test$table.body
corr_results_f <- as.data.frame(values, stringsAsFactors = FALSE) # Create a dataframe
colnames(corr_results_f) <- variable_names # Assign column names
save(corr_results_f, file = "paper/Tables/corr_results_f.RData")
# --------
# Model Summary
# --------
#bifactor models
anova_results <- anova(model1a_s_1bi,
model1b_s_1bi,
model2_bi,
model3_ayers,
model4_kaisercope,
model5_kaiserayers)
anova(model3_ayers,
model5_kaiserayers)
#1 model1_exploratory
#2 model5_kaiserayers
coef(model1_exploratory, simplify=TRUE)
summary(model1_exploratory)
#itemfit(model1_exploratory, QMC=TRUE)
residuals(model1_exploratory, QMC=TRUE)
coef(model5_kaiserayers, simplify=TRUE)
summary(model5_kaiserayers) #loadings
# rerun the favored model
# --------
# paper export
# --------
#RCQ-L
RCQL <- codebook[codebook$item_name_auswertung %in% names(data_EGA), ]
RCQL$M <- NA
RCQL$SD <- NA
RCQL <- RCQL %>%
select(ID = nr,
`Itemtext (German)` = item_beschriftung_soscisurvey,
Factor = name_facette,
Subfactor = name_subskala,
Inverse = zu_rekodieren,
item_name_auswertung,
M,  # Placeholder for mean
SD)  # Placeholder for standard deviation
# Define German/English equivalents of Factor and Subfactor names
german_factor_names <- c("Ablehnung (-)", "Ablenkung", "Aktives Coping", "Akzeptanz", "Behavioural disengagement (-)", "Familiärer Zusammenhalt", "Humor", "Instrumentelle Unterstützung", "Kognitive Rekonstruierung", "Mentale Anstrengung", "Optimismus", "Physische Anstrengung", "Positives Denken", "Selbstvorwurf (-)", "Selbstwahrnehmung", "Sinn, Zweck/Bestimmung und Entwicklung", "Soziale Unterstützung", "Umgang mit Angst", "Wunsch Denken (-)", "Zukunftsplanung")
english_factor_names <- c("Rejection (-)", "Distraction", "Active Coping", "Acceptance", "Behavioral Disengagement (-)", "Family Cohesion", "Humor", "Instrumental Support", "Cognitive Restructuring", "Mental Effort", "Optimism", "Physical Effort", "Positive Thinking", "Self-Blame (-)", "Self-Perception", "Meaning, Purpose and Growth", "Social Support", "Dealing with Anxiety", "Wishful Thinking", "Future Planning")
german_subfactor_names <- c("selbst leugnen", "anderen die Schuld zuweisen", "an etwas anderes Denken/über etwas weniger Nachdenken", "aktiv werden", "lernen damit zu leben", "mit vergangenem abschließen", "Coping aufgeben", "Familiäre Kohärenz", "witze darüber machen", "instrumentelle Unterstützung", "Kognitive Flexibilität", "rekonstruieren", "Emotionale Flexibilität", "gedächtnis herausfordern", "Zuversicht", "realistischer Optimismus", "Fitness und Kraft", "positiv/optimistisch", "selbst schuld geben", "Selbstwirksamkeitserwartung und Selbstwert", "Hoffnung", "Bedeutung geben", "zweck verfolgen", "soziale Unterstützung", "Sozial Kompetenz", "Ängsten stellen", "wunsch nach veränderung", "wunsch nach wunder/fantasie", "Einstellungen zu Zukunftsaussichten", "Fähigkeit zukunftsorientiert zu planen")
english_subfactor_names <- c("self-blame", "blaming others", "distraction", "taking action", "learning to live with it", "closing the past", "giving up coping", "family coherence", "making jokes about it", "instrumental support", "cognitive flexibility", "reconstructing", "emotional flexibility", "challenging memory", "confidence", "realistic optimism", "fitness and strength", "thinking positively", "blaming oneself", "self-efficacy/self-esteem", "hope", "giving meaning", "pursuing goals", "social support", "social competence", "facing fears", "desire for change", "wish for miracles", "attitudes towards future prospects", "ability to plan for the future")
# Rename Factor and Subfactor columns in RCQL dataframe
RCQL$Factor <- factor(RCQL$Factor, levels = unique(RCQL$Factor), labels = english_factor_names)
RCQL$Subfactor <- factor(RCQL$Subfactor, levels = unique(RCQL$Subfactor), labels = english_subfactor_names)
# Order the dataframe based on Factor and Subfactor columns
RCQL <- RCQL[order(substr(RCQL$Factor, 1, 2), factor(RCQL$Subfactor, levels = unique(RCQL$Subfactor))), ] # must be done based on first letter otherwise it is not working because of the "(-)
RCQL <- RCQL %>%
slice(5:9, 1:4, 10:n())
RCQL$ID <- 1:98
# Extract means and standard deviations from describe(data_EGA)
stats <- describe(data_EGA) %>% select(mean,sd) %>%
rownames_to_column("item_name_auswertung")
# Update RCQL with mean and standard deviation columns
RCQL <- RCQL %>%
left_join(stats, by = "item_name_auswertung") %>%
mutate(M = round(mean, 2),
SD = round(sd, 2)) %>%
select(-mean, -sd)  # Remove redundant columns
# Replace spelling error
RCQL$`Itemtext (German)`[25] <- "Um meine Ängste zu überwinden, mache ich mir dafür notwendige Verhaltensweisen und Fähigkeiten bewusst und setze diese um."
rm(stats)
save(anova_results, file = "paper/Tables/anova_results.RData")
saveRDS(RCQL, file = "paper/Tables/RCQL.rds")
